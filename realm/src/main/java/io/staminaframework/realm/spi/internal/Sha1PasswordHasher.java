/*
 * Copyright (c) 2017 Stamina Framework developers.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.staminaframework.realm.spi.internal;

import io.staminaframework.realm.spi.PasswordHasher;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.useradmin.Role;
import org.osgi.service.useradmin.UserAdminEvent;
import org.osgi.service.useradmin.UserAdminListener;

import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Base64;

/**
 * {@link PasswordHasher} implementation using SHA-1 algorithm.
 *
 * @author Stamina Framework developers
 */
@Component(service = {PasswordHasher.class, UserAdminListener.class},
        property = {PasswordHasher.HASH_TYPE + "=sha1", Constants.SERVICE_RANKING + ":Integer=" + Sha1PasswordHasher.SALT_LENGTH},
        configurationPid = "io.staminaframework.realm.sha1")
public class Sha1PasswordHasher implements PasswordHasher, UserAdminListener {
    /**
     * Salt length generated by this component.
     */
    public static final int SALT_LENGTH = 160;

    /**
     * Component configuration.
     *
     * @author Stamina Framework developers
     */
    @interface Config {
        /**
         * Get whether an user-related salt should be used.
         */
        boolean useSalt() default true;
    }

    @Reference(target = "(provider=stamina-realm)")
    private SecureRandom secureRandom;
    private BundleContext bundleContext;
    private boolean useSalt;

    @Activate
    public void activate(BundleContext bundleContext, Config config) {
        this.bundleContext = bundleContext;
        useSalt = config.useSalt();
    }

    @Deactivate
    public void deactivate() {
        bundleContext = null;
    }

    @Override
    public String hash(String user, String password) throws Exception {
        final MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(password.getBytes("UTF-8"));

        if (useSalt) {
            final byte[] userSalt = PasswordHasherUtils.getUserSalt(bundleContext, user,
                    "sha1", SALT_LENGTH, secureRandom);
            md.update(userSalt);
        }

        final byte[] hashedPassword = md.digest();
        return Base64.getEncoder().encodeToString(hashedPassword);
    }

    @Override
    public void roleChanged(UserAdminEvent event) {
        if (event.getType() == UserAdminEvent.ROLE_REMOVED && event.getRole().getType() == Role.USER) {
            PasswordHasherUtils.resetUserSalt(bundleContext, event.getRole().getName(), "sha1");
        }
    }
}
