/*
 * Copyright (c) 2017 Stamina Framework developers.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.staminaframework.realm.spi;

import org.osgi.annotation.versioning.ProviderType;

/**
 * Service interface for a component responsible for hashing passwords.
 *
 * @author Stamina Framework developers
 */
@ProviderType
public interface PasswordHasher {
    /**
     * Service property specifying hash algorithm type.
     * This value is compared to the hash prefix generated by the {@link #hash(String, String)} method.
     */
    String HASH_TYPE = "hash.type";

    /**
     * Hash a password.
     * <p>
     * The result should follow this pattern: <code>&lt;hash prefix&gt;:&lt;hashed password&gt;</code>.
     * <p>
     * For example: <code>sha1:fa9beb99e4029ad5a6615399e7bbae21356086b3</code>
     *
     * @param user     user name (may be used for creating a custom salt for the hashed password)
     * @param password input password to hash
     * @return hashed password with a prefix, <code>null</code> if this operation failed for some reasons
     */
    String hash(String user, String password);

    /**
     * Get user salt used when hashing passwords.
     *
     * @param user user related salt
     * @return user salt, <code>null</code> if none
     */
    byte[] salt(String user);
}
